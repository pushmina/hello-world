#include <iostream>
#include<fstream>
#include<cmath>

using namespace std;
const int N=40;
int x[N], y[N];
void READ ();
int COUNT (int a[], int b[]);

int main()
{
   READ();
   cout<<COUNT(x,y);
   return 0;
}

void READ ()
{
    fstream file ("input1.1");
    if (!file)
        cout<<"error"<<endl;
    ifstream fin("input1.1");
    for (int i=0; i<N; i++)
        fin>>x[i]>>y[i];
}

int COUNT (int a[], int b[])
{
    int colors_num[N];
    int color=0;
    for (int i=0;i<N;i++)
        colors_num[i]=0;
    for (int i=0;i<N;i++)
    {
        bool prev=false;
        bool prevv=false;
        if(colors_num[i]==0)
        {
            color++;
            colors_num[i]=color;

            for(int j=0; j<N; j++)
            {
                double dist=abs(sqrt((a[j]-a[i])*(a[j]-a[i])+(b[j]-b[i])*(b[j]-b[i])));
                if (dist<=1)
                {
                    if (j>i)
                    {
                        if (colors_num[j]==0)
                            colors_num[j]=colors_num[i];
                        else
                        {
                            for(int k=0; k<N; k++)
                            {
                                if (k!=i && colors_num[k]==colors_num[i])
                                    colors_num[k]=colors_num[j];
                            }
                            colors_num[i]=colors_num[j];
                            if (prev==false)
                            {
                                color--;
                                prev=true;
                            }
                        }
                    }
                    else
                    {
                       if (i!=j && prevv==false)
                           prevv=true;
                    }
                }
            }

        }
        if (prevv==true && prev==false)
                color--;
        else
        {
            for(int j=0; j<i; j++)
            {
                int buf=0;
                double dist=abs(sqrt((a[j]-a[i])*(a[j]-a[i])+(b[j]-b[i])*(b[j]-b[i])));
                if (dist<=1 && colors_num[i]!=colors_num[j] && colors_num[i]!=buf)
                {
                    buf=colors_num[j];
                    color--;
                    colors_num[j]=colors_num[i];
                }
            }
        }
    }
    return color;
}
